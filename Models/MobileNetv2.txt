input = Input(shape=(100, 100, 1))

first_block_filters = make_divisible(32*1, 8)
x = ZeroPadding2D(padding=correct_pad(input, 3))(input)
x = Conv2D(first_block_filters, kernel_size=(3, 3),
           strides=(2, 2), padding='valid')(x)
x = BatchNormalization()(x)
x = ReLU(6.)(x)

x = inverted_res_block(t=1, strides=(1, 1), alpha=1, filters=16, is_expansion=False)(x)

x = inverted_res_block(t=6, strides=(2, 2), alpha=1, filters=24)(x)
x = inverted_res_block(t=6, strides=(1, 1), alpha=1, filters=24)(x)

x = inverted_res_block(t=6, strides=(2, 2), alpha=1, filters=32)(x)
x = inverted_res_block(t=6, strides=(1, 1), alpha=1, filters=32)(x)
x = inverted_res_block(t=6, strides=(1, 1), alpha=1, filters=32)(x)

x = inverted_res_block(t=6, strides=(2, 2), alpha=1, filters=64)(x)
x = inverted_res_block(t=6, strides=(1, 1), alpha=1, filters=64)(x)
x = inverted_res_block(t=6, strides=(1, 1), alpha=1, filters=64)(x)
x = inverted_res_block(t=6, strides=(1, 1), alpha=1, filters=64)(x)

x = inverted_res_block(t=6, strides=(1, 1), alpha=1, filters=96)(x)
x = inverted_res_block(t=6, strides=(1, 1), alpha=1, filters=96)(x)
x = inverted_res_block(t=6, strides=(1, 1), alpha=1, filters=96)(x)

x = inverted_res_block(t=6, strides=(2, 2), alpha=1, filters=160)(x)
x = inverted_res_block(t=6, strides=(1, 1), alpha=1, filters=160)(x)
x = inverted_res_block(t=6, strides=(1, 1), alpha=1, filters=160)(x)

x = inverted_res_block(t=6, strides=(1, 1), alpha=1, filters=320)(x)

x = Conv2D(1280, kernel_size=(1, 1))(x)
x = BatchNormalization()(x)
x = ReLU(6.)(x)

x = GlobalAveragePooling2D()(x)
output = Dense(34, activation='softmax')(x)

model = Model(inputs=input, outputs=output)
