input = Input(shape=(100, 100, 1))

conv1 = Conv2D(filters=64, 
               kernel_size=(7, 7), 
               strides=(2, 2), 
               padding="same",
               kernel_initializer="he_normal",
               kernel_regularizer=l2(1e-4))(input)
bn1 = BatchNormalization(axis=3)(conv1)
act1 = Activation("relu")(bn1)
mp1 = MaxPooling2D(pool_size=(3, 3),
                   strides=(2, 2),
                   padding="same")(act1)

conv2_a_1 = Conv2D(filters=64,
                   kernel_size=(1, 1),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(mp1)
bn2_a_2 = BatchNormalization(axis=3)(conv2_a_1)
act2_a_2 = Activation("relu")(bn2_a_2)
conv2_a_2 = Conv2D(filters=64,
                   kernel_size=(3, 3),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act2_a_2) 
bn2_a_3 = BatchNormalization(axis=3)(conv2_a_2)
act2_a_3 = Activation("relu")(bn2_a_3)
res2_a = Conv2D(filters=256,
                kernel_size=(1, 1),
                strides=(1, 1),
                padding="same",
                kernel_initializer="he_normal",
                kernel_regularizer=l2(1e-4))(act2_a_3)
mp1_shape = K.int_shape(mp1)
res2_a_shape = K.int_shape(res2_a)
stride2_a_r = int(round(mp1_shape[1] / res2_a_shape[1]))
stride2_a_c = int(round(mp1_shape[2] / res2_a_shape[2]))
sc2_a = Conv2D(filters=res2_a_shape[3],
               kernel_size=(1, 1),
               strides=(stride2_a_r, stride2_a_c),
               padding="valid",
               kernel_initializer="he_normal",
               kernel_regularizer=l2(1e-4))(mp1)
res_block2_a = add([sc2_a, res2_a])

bn2_b_1 = BatchNormalization(axis=3)(res_block2_a)
act2_b_1 = Activation("relu")(bn2_b_1)
conv2_b_1 = Conv2D(filters=64,
                   kernel_size=(1, 1),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act2_b_1) 
bn2_b_2 = BatchNormalization(axis=3)(conv2_b_1)
act2_b_2 = Activation("relu")(bn2_b_2)
conv2_b_2 = Conv2D(filters=64,
                   kernel_size=(3, 3),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act2_b_2)
bn2_b_3 = BatchNormalization(axis=3)(conv2_b_2)
act2_b_3 = Activation("relu")(bn2_b_3)
res2_b = Conv2D(filters=256,
                kernel_size=(1, 1),
                strides=(1, 1),
                padding="same",
                kernel_initializer="he_normal",
                kernel_regularizer=l2(1e-4))(act2_b_3)
sc2_b = res_block2_a
res_block2_b = add([sc2_b, res2_b])

bn2_c_1 = BatchNormalization(axis=3)(res_block2_b)
act2_c_1 = Activation("relu")(bn2_c_1)
conv2_c_1 = Conv2D(filters=64,
                   kernel_size=(1, 1),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act2_c_1)
bn2_c_2 = BatchNormalization(axis=3)(conv2_c_1)
act2_c_2 = Activation("relu")(bn2_c_2)
conv2_c_2 = Conv2D(filters=64,
                   kernel_size=(3, 3),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act2_c_2)
bn2_c_3 = BatchNormalization(axis=3)(conv2_c_2)
act2_c_3 = Activation("relu")(bn2_c_3)
res2_c = Conv2D(filters=256,
                kernel_size=(1, 1),
                strides=(1, 1),
                padding="same",
                kernel_initializer="he_normal",
                kernel_regularizer=l2(1e-4))(act2_c_3)
sc2_c = res_block2_b
res_block2_c = add([sc2_c, res2_c])

conv3_a_1 = Conv2D(filters=128,
                   kernel_size=(1, 1),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(res_block2_c)
bn3_a_2 = BatchNormalization(axis=3)(conv3_a_1)
act3_a_2 = Activation("relu")(bn3_a_2)
conv3_a_2 = Conv2D(filters=128,
                   kernel_size=(3, 3),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act3_a_2) 
bn3_a_3 = BatchNormalization(axis=3)(conv3_a_2)
act3_a_3 = Activation("relu")(bn3_a_3)
res3_a = Conv2D(filters=512,
                kernel_size=(1, 1),
                strides=(1, 1),
                padding="same",
                kernel_initializer="he_normal",
                kernel_regularizer=l2(1e-4))(act3_a_3)
res_block2_c_shape = K.int_shape(res_block2_c)
res3_a_shape = K.int_shape(res3_a)
stride3_a_r = int(round(res_block2_c_shape[1] / res3_a_shape[1]))
stride3_a_c = int(round(res_block2_c_shape[2] / res3_a_shape[2]))
sc3_a = Conv2D(filters=res3_a_shape[3],
               kernel_size=(1, 1),
               strides=(stride3_a_r, stride3_a_c),
               padding="valid",
               kernel_initializer="he_normal",
               kernel_regularizer=l2(1e-4))(res_block2_c)
res_block3_a = add([sc3_a, res3_a])

bn3_b_1 = BatchNormalization(axis=3)(res_block3_a)
act3_b_1 = Activation("relu")(bn3_b_1)
conv3_b_1 = Conv2D(filters=128,
                   kernel_size=(1, 1),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act3_b_1) 
bn3_b_2 = BatchNormalization(axis=3)(conv3_b_1)
act3_b_2 = Activation("relu")(bn3_b_2)
conv3_b_2 = Conv2D(filters=128,
                   kernel_size=(3, 3),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act3_b_2)
bn3_b_3 = BatchNormalization(axis=3)(conv3_b_2)
act3_b_3 = Activation("relu")(bn3_b_3)
res3_b = Conv2D(filters=512,
                kernel_size=(1, 1),
                strides=(1, 1),
                padding="same",
                kernel_initializer="he_normal",
                kernel_regularizer=l2(1e-4))(act3_b_3)
sc3_b = res_block3_a
res_block3_b = add([sc3_b, res3_b])

bn3_c_1 = BatchNormalization(axis=3)(res_block3_b)
act3_c_1 = Activation("relu")(bn3_c_1)
conv3_c_1 = Conv2D(filters=128,
                   kernel_size=(1, 1),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act3_c_1) 
bn3_c_2 = BatchNormalization(axis=3)(conv3_c_1)
act3_c_2 = Activation("relu")(bn3_c_2)
conv3_c_2 = Conv2D(filters=128,
                   kernel_size=(3, 3),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act3_c_2)
bn3_c_3 = BatchNormalization(axis=3)(conv3_c_2)
act3_c_3 = Activation("relu")(bn3_c_3)
res3_c = Conv2D(filters=512,
                kernel_size=(1, 1),
                strides=(1, 1),
                padding="same",
                kernel_initializer="he_normal",
                kernel_regularizer=l2(1e-4))(act3_c_3)
sc3_c = res_block3_b
res_block3_c = add([sc3_c, res3_c])

bn3_d_1 = BatchNormalization(axis=3)(res_block3_c)
act3_d_1 = Activation("relu")(bn3_d_1)
conv3_d_1 = Conv2D(filters=128,
                   kernel_size=(1, 1),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act3_d_1) 
bn3_d_2 = BatchNormalization(axis=3)(conv3_d_1)
act3_d_2 = Activation("relu")(bn3_d_2)
conv3_d_2 = Conv2D(filters=128,
                   kernel_size=(3, 3),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act3_d_2)
bn3_d_3 = BatchNormalization(axis=3)(conv3_d_2)
act3_d_3 = Activation("relu")(bn3_d_3)
res3_d = Conv2D(filters=512,
                kernel_size=(1, 1),
                strides=(1, 1),
                padding="same",
                kernel_initializer="he_normal",
                kernel_regularizer=l2(1e-4))(act3_d_3)
sc3_d = res_block3_c
res_block3_d = add([sc3_d, res3_d]) 

conv4_a_1 = Conv2D(filters=256,
                   kernel_size=(1, 1),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(res_block3_d)
bn4_a_2 = BatchNormalization(axis=3)(conv4_a_1)
act4_a_2 = Activation("relu")(bn4_a_2)
conv4_a_2 = Conv2D(filters=256,
                   kernel_size=(3, 3),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act4_a_2) 
bn4_a_3 = BatchNormalization(axis=3)(conv4_a_2)
act4_a_3 = Activation("relu")(bn4_a_3)
res4_a = Conv2D(filters=1024,
                kernel_size=(1, 1),
                strides=(1, 1),
                padding="same",
                kernel_initializer="he_normal",
                kernel_regularizer=l2(1e-4))(act4_a_3)
res_block3_d_shape = K.int_shape(res_block3_d)
res4_a_shape = K.int_shape(res4_a)
stride4_a_r = int(round(res_block3_d_shape[1] / res4_a_shape[1]))
stride4_a_c = int(round(res_block3_d_shape[2] / res4_a_shape[2]))
sc4_a = Conv2D(filters=res4_a_shape[3],
               kernel_size=(1, 1),
               strides=(stride4_a_r, stride4_a_c),
               padding="valid",
               kernel_initializer="he_normal",
               kernel_regularizer=l2(1e-4))(res_block3_d)
res_block4_a = add([sc4_a, res4_a])          

bn4_b_1 = BatchNormalization(axis=3)(res_block4_a)
act4_b_1 = Activation("relu")(bn4_b_1)
conv4_b_1 = Conv2D(filters=256,
                   kernel_size=(1, 1),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act4_b_1) 
bn4_b_2 = BatchNormalization(axis=3)(conv4_b_1)
act4_b_2 = Activation("relu")(bn4_b_2)
conv4_b_2 = Conv2D(filters=256,
                   kernel_size=(3, 3),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act4_b_2)
bn4_b_3 = BatchNormalization(axis=3)(conv4_b_2)
act4_b_3 = Activation("relu")(bn4_b_3)
res4_b = Conv2D(filters=1024,
                kernel_size=(1, 1),
                strides=(1, 1),
                padding="same",
                kernel_initializer="he_normal",
                kernel_regularizer=l2(1e-4))(act4_b_3)
sc4_b = res_block4_a
res_block4_b = add([sc4_b, res4_b]) 

bn4_c_1 = BatchNormalization(axis=3)(res_block4_b)
act4_c_1 = Activation("relu")(bn4_c_1)
conv4_c_1 = Conv2D(filters=256,
                   kernel_size=(1, 1),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act4_c_1) 
bn4_c_2 = BatchNormalization(axis=3)(conv4_c_1)
act4_c_2 = Activation("relu")(bn4_c_2)
conv4_c_2 = Conv2D(filters=256,
                   kernel_size=(3, 3),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act4_c_2)
bn4_c_3 = BatchNormalization(axis=3)(conv4_c_2)
act4_c_3 = Activation("relu")(bn4_c_3)
res4_c = Conv2D(filters=1024,
                kernel_size=(1, 1),
                strides=(1, 1),
                padding="same",
                kernel_initializer="he_normal",
                kernel_regularizer=l2(1e-4))(act4_c_3)
sc4_c = res_block4_b
res_block4_c = add([sc4_c, res4_c])

bn4_d_1 = BatchNormalization(axis=3)(res_block4_c)
act4_d_1 = Activation("relu")(bn4_d_1)
conv4_d_1 = Conv2D(filters=256,
                   kernel_size=(1, 1),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act4_d_1) 
bn4_d_2 = BatchNormalization(axis=3)(conv4_d_1)
act4_d_2 = Activation("relu")(bn4_d_2)
conv4_d_2 = Conv2D(filters=256,
                   kernel_size=(3, 3),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act4_d_2)
bn4_d_3 = BatchNormalization(axis=3)(conv4_d_2)
act4_d_3 = Activation("relu")(bn4_d_3)
res4_d = Conv2D(filters=1024,
                kernel_size=(1, 1),
                strides=(1, 1),
                padding="same",
                kernel_initializer="he_normal",
                kernel_regularizer=l2(1e-4))(act4_d_3)
sc4_d = res_block4_c
res_block4_d = add([sc4_d, res4_d])

bn4_e_1 = BatchNormalization(axis=3)(res_block4_d)
act4_e_1 = Activation("relu")(bn4_e_1)
conv4_e_1 = Conv2D(filters=256,
                   kernel_size=(1, 1),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act4_e_1) 
bn4_e_2 = BatchNormalization(axis=3)(conv4_e_1)
act4_e_2 = Activation("relu")(bn4_e_2)
conv4_e_2 = Conv2D(filters=256,
                   kernel_size=(3, 3),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act4_e_2)
bn4_e_3 = BatchNormalization(axis=3)(conv4_e_2)
act4_e_3 = Activation("relu")(bn4_e_3)
res4_e = Conv2D(filters=1024,
                kernel_size=(1, 1),
                strides=(1, 1),
                padding="same",
                kernel_initializer="he_normal",
                kernel_regularizer=l2(1e-4))(act4_e_3)
sc4_e = res_block4_d
res_block4_e = add([sc4_e, res4_e])

bn4_f_1 = BatchNormalization(axis=3)(res_block4_e)
act4_f_1 = Activation("relu")(bn4_f_1)
conv4_f_1 = Conv2D(filters=256,
                   kernel_size=(1, 1),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act4_f_1) 
bn4_f_2 = BatchNormalization(axis=3)(conv4_f_1)
act4_f_2 = Activation("relu")(bn4_f_2)
conv4_f_2 = Conv2D(filters=256,
                   kernel_size=(3, 3),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act4_f_2)
bn4_f_3 = BatchNormalization(axis=3)(conv4_f_2)
act4_f_3 = Activation("relu")(bn4_f_3)
res4_f = Conv2D(filters=1024,
                kernel_size=(1, 1),
                strides=(1, 1),
                padding="same",
                kernel_initializer="he_normal",
                kernel_regularizer=l2(1e-4))(act4_f_3)
sc4_f = res_block4_e
res_block4_f = add([sc4_f, res4_f])

conv5_a_1 = Conv2D(filters=512,
                   kernel_size=(1, 1),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(res_block4_f)
bn5_a_2 = BatchNormalization(axis=3)(conv5_a_1)
act5_a_2 = Activation("relu")(bn5_a_2)
conv5_a_2 = Conv2D(filters=512,
                   kernel_size=(3, 3),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act5_a_2) 
bn5_a_3 = BatchNormalization(axis=3)(conv5_a_2)
act5_a_3 = Activation("relu")(bn5_a_3)
res5_a = Conv2D(filters=2048,
                kernel_size=(1, 1),
                strides=(1, 1),
                padding="same",
                kernel_initializer="he_normal",
                kernel_regularizer=l2(1e-4))(act5_a_3)
res_block4_f_shape = K.int_shape(res_block4_f)
res5_a_shape = K.int_shape(res5_a)
stride5_a_r = int(round(res_block4_f_shape[1] / res5_a_shape[1]))
stride5_a_c = int(round(res_block4_f_shape[2] / res5_a_shape[2]))
sc5_a = Conv2D(filters=res5_a_shape[3],
               kernel_size=(1, 1),
               strides=(stride5_a_r, stride5_a_c),
               padding="valid",
               kernel_initializer="he_normal",
               kernel_regularizer=l2(1e-4))(res_block4_f)
res_block5_a = add([sc5_a, res5_a])

bn5_b_1 = BatchNormalization(axis=3)(res_block5_a)
act5_b_1 = Activation("relu")(bn5_b_1)
conv5_b_1 = Conv2D(filters=512,
                   kernel_size=(1, 1),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act5_b_1) 
bn5_b_2 = BatchNormalization(axis=3)(conv5_b_1)
act5_b_2 = Activation("relu")(bn5_b_2)
conv5_b_2 = Conv2D(filters=512,
                   kernel_size=(3, 3),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act5_b_2)
bn5_b_3 = BatchNormalization(axis=3)(conv5_b_2)
act5_b_3 = Activation("relu")(bn5_b_3)
res5_b = Conv2D(filters=2048,
                kernel_size=(1, 1),
                strides=(1, 1),
                padding="same",
                kernel_initializer="he_normal",
                kernel_regularizer=l2(1e-4))(act5_b_3)
sc5_b = res_block5_a
res_block5_b = add([sc5_b, res5_b])

bn5_c_1 = BatchNormalization(axis=3)(res_block5_b)
act5_c_1 = Activation("relu")(bn5_c_1)
conv5_c_1 = Conv2D(filters=512,
                   kernel_size=(1, 1),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act5_c_1) 
bn5_c_2 = BatchNormalization(axis=3)(conv5_c_1)
act5_c_2 = Activation("relu")(bn5_c_2)
conv5_c_2 = Conv2D(filters=512,
                   kernel_size=(3, 3),
                   strides=(1, 1),
                   padding="same",
                   kernel_initializer="he_normal",
                   kernel_regularizer=l2(1e-4))(act5_c_2)
bn5_c_3 = BatchNormalization(axis=3)(conv5_c_2)
act5_c_3 = Activation("relu")(bn5_c_3)
res5_c = Conv2D(filters=2048,
                kernel_size=(1, 1),
                strides=(1, 1),
                padding="same",
                kernel_initializer="he_normal",
                kernel_regularizer=l2(1e-4))(act5_c_3)
sc5_c = res_block5_b
res_block5_c = add([sc5_c, res5_c])

bn6 = BatchNormalization(axis=3)(res_block5_c)
block6 = Activation("relu")(bn6)
block6_shape = K.int_shape(block6)
avgp6 = AveragePooling2D(pool_size=(block6_shape[1], block6_shape[2]),
                         strides=(1, 1))(block6)
flat6 = Flatten()(avgp6)
output = Dense(34, activation="softmax",
               kernel_initializer="he_normal")(flat6)
model = Model(inputs=input, outputs=output)
